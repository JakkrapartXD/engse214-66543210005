// sql-injection.js - SQL Injection Demo System

// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const mockDatabase = [
    { id: 1, username: 'admin', password: 'admin123', role: 'administrator', email: 'admin@example.com' },
    { id: 2, username: 'user', password: 'password', role: 'user', email: 'user@example.com' },
    { id: 3, username: 'test', password: 'test123', role: 'tester', email: 'test@example.com' },
    { id: 4, username: 'guest', password: 'guest', role: 'guest', email: 'guest@example.com' },
    { id: 5, username: 'manager', password: 'manager456', role: 'manager', email: 'manager@example.com' }
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á SQL Query ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà (‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
function vulnerableQuery(username, password) {
    console.log('üî¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Vulnerable SQL Query');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢!)
    const sqlQuery = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
    
    console.log('SQL Query:', sqlQuery);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL Injection patterns
    const injectionPatterns = [
        "' OR 1=1",
        "' OR '1'='1",
        "' UNION SELECT",
        "' /*",
        "' OR 'x'='x",
        "admin' --",
        "admin' #",
        "' OR 1=1 --",
        "' OR 1=1 #"
    ];
    
    let isInjection = false;
    let injectionType = '';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ SQL Injection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (let pattern of injectionPatterns) {
        if (username.toLowerCase().includes(pattern.toLowerCase()) || 
            password.toLowerCase().includes(pattern.toLowerCase())) {
            isInjection = true;
            
            if (pattern.includes('UNION')) {
                injectionType = 'Union Attack';
            } else if (pattern.includes('/*')) {
                injectionType = 'Comment Attack';
            } else if (pattern.includes('1=1')) {
                injectionType = 'Boolean Attack';
            } else {
                injectionType = 'Basic SQL Injection';
            }
            break;
        }
    }
    
    if (isInjection) {
        console.log(`üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö SQL Injection: ${injectionType}`);
        
        // ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ SQL Injection ‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return {
            success: true,
            message: `üîì SQL Injection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${injectionType})`,
            data: mockDatabase, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            query: sqlQuery,
            vulnerability: true,
            injectionType: injectionType
        };
    }
    
    // ‡∏Å‡∏≤‡∏£ login ‡∏õ‡∏Å‡∏ï‡∏¥
    const user = mockDatabase.find(u => u.username === username && u.password === password);
    
    if (user) {
        return {
            success: true,
            message: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${user.username}`,
            data: [user],
            query: sqlQuery,
            vulnerability: false
        };
    } else {
        return {
            success: false,
            message: '‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            data: [],
            query: sqlQuery,
            vulnerability: false
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á SQL Query ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
function secureQuery(username, password) {
    console.log('üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Secure SQL Query');
    
    // Input Validation ‡πÅ‡∏•‡∏∞ Sanitization
    const cleanUsername = sanitizeInput(username);
    const cleanPassword = sanitizeInput(password);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Parameterized Query (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    const sqlQuery = `SELECT * FROM users WHERE username = ? AND password = ?`;
    console.log('SQL Query:', sqlQuery);
    console.log('Parameters:', [cleanUsername, cleanPassword]);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL Injection patterns
    if (containsSQLInjection(username) || containsSQLInjection(password)) {
        console.log('üõ°Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return {
            success: false,
            message: 'üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° SQL Injection - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
            data: [],
            query: sqlQuery,
            parameters: [cleanUsername, cleanPassword],
            vulnerability: false,
            blocked: true
        };
    }
    
    // ‡∏Å‡∏≤‡∏£ login ‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ sanitize ‡πÅ‡∏•‡πâ‡∏ß)
    const user = mockDatabase.find(u => u.username === cleanUsername && u.password === cleanPassword);
    
    if (user) {
        return {
            success: true,
            message: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${user.username}`,
            data: [user],
            query: sqlQuery,
            parameters: [cleanUsername, cleanPassword],
            vulnerability: false
        };
    } else {
        return {
            success: false,
            message: '‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            data: [],
            query: sqlQuery,
            parameters: [cleanUsername, cleanPassword],
            vulnerability: false
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sanitize Input
function sanitizeInput(input) {
    if (!input) return '';
    
    return input
        .replace(/'/g, "''")           // Escape single quotes
        .replace(/--/g, "")            // Remove SQL comments
        .replace(/\/\*/g, "")          // Remove block comment start
        .replace(/\*\//g, "")          // Remove block comment end
        .replace(/;/g, "")             // Remove semicolon
        .replace(/\bUNION\b/gi, "")    // Remove UNION keyword
        .replace(/\bSELECT\b/gi, "")   // Remove SELECT keyword
        .replace(/\bINSERT\b/gi, "")   // Remove INSERT keyword
        .replace(/\bUPDATE\b/gi, "")   // Remove UPDATE keyword
        .replace(/\bDELETE\b/gi, "")   // Remove DELETE keyword
        .replace(/\bDROP\b/gi, "")     // Remove DROP keyword
        .trim();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL Injection patterns
function containsSQLInjection(input) {
    if (!input) return false;
    
    const injectionPatterns = [
        /'/,                           // Single quote
        /--/,                          // SQL comment
        /\/\*/,                        // Block comment start
        /\*\//,                        // Block comment end
        /\bOR\s+1\s*=\s*1\b/i,        // OR 1=1
        /\bOR\s+'\w*'\s*=\s*'\w*'\b/i, // OR 'x'='x'
        /\bUNION\b/i,                 // UNION
        /\bSELECT\b/i,                // SELECT
        /\bINSERT\b/i,                // INSERT
        /\bUPDATE\b/i,                // UPDATE
        /\bDELETE\b/i,                // DELETE
        /\bDROP\b/i                   // DROP
    ];
    
    return injectionPatterns.some(pattern => pattern.test(input));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function createResultTable(data) {
    if (!data || data.length === 0) {
        return '<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>';
    }
    
    let html = '<table class="users-table">';
    html += '<thead><tr><th>ID</th><th>Username</th><th>Password</th><th>Role</th><th>Email</th></tr></thead>';
    html += '<tbody>';
    
    data.forEach(user => {
        html += `<tr>
            <td>${user.id}</td>
            <td>${user.username}</td>
            <td>${user.password}</td>
            <td>${user.role}</td>
            <td>${user.email}</td>
        </tr>`;
    });
    
    html += '</tbody></table>';
    return html;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function showResult(result) {
    const resultSection = document.getElementById('result-section');
    const resultTitle = document.getElementById('result-title');
    const resultContent = document.getElementById('result-content');
    
    if (!resultSection || !resultTitle || !resultContent) return;
    
    // ‡πÅ‡∏™‡∏î‡∏á result section
    resultSection.style.display = 'block';
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (result.success) {
        resultSection.className = 'result-section result-success';
        resultTitle.textContent = '‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ Login - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
    } else {
        resultSection.className = 'result-section result-error';
        resultTitle.textContent = '‚ùå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ Login - ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    let content = `<p><strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</strong> ${result.message}</p>`;
    
    if (result.vulnerability) {
        content += `<p><strong>üö® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ:</strong> ${result.injectionType}</p>`;
        content += `<p><strong>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏•:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!</p>`;
    }
    
    if (result.blocked) {
        content += `<p><strong>üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏•‡πâ‡∏ß</p>`;
    }
    
    content += `<p><strong>SQL Query:</strong></p>`;
    content += `<div class="code-block">${result.query}</div>`;
    
    if (result.parameters) {
        content += `<p><strong>Parameters:</strong> ${JSON.stringify(result.parameters)}</p>`;
    }
    
    if (result.data && result.data.length > 0) {
        content += `<p><strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</strong></p>`;
        content += createResultTable(result.data);
    }
    
    resultContent.innerHTML = content;
    
    // Scroll ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    resultSection.scrollIntoView({ behavior: 'smooth' });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£ login
function processLogin(username, password) {
    const mode = localStorage.getItem('sqlMode') || 'safe';
    
    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Login - ‡πÇ‡∏´‡∏°‡∏î: ${mode}`);
    console.log(`Username: "${username}", Password: "${password}"`);
    
    let result;
    
    if (mode === 'unsafe') {
        result = vulnerableQuery(username, password);
    } else {
        result = secureQuery(username, password);
    }
    
    showResult(result);
    
    // Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
    console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', result);
    
    return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö payloads ‡∏ï‡πà‡∏≤‡∏á‡πÜ
function testAllPayloads() {
    const payloads = [
        "' OR 1=1 --",
        "' UNION SELECT * FROM users --",
        "'/*",
        "' OR '1'='1",
        "admin' --",
        "' OR 'x'='x' --"
    ];
    
    console.log('üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö SQL Injection payloads ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    
    payloads.forEach((payload, index) => {
        console.log(`\n--- Test ${index + 1}: ${payload} ---`);
        processLogin(payload, 'anything');
    });
}

// Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° login
document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('login-form');
    
    if (loginForm) {
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (!username.trim()) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Username');
                return;
            }
            
            processLogin(username, password);
        });
    }
    
    console.log('üíâ SQL Injection Demo System ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    console.log('üìö ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:');
    console.log('- testAllPayloads() - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö payloads ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('- processLogin(username, password) - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login');
    console.log('- containsSQLInjection(input) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SQL injection');
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô window ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Console
window.testAllPayloads = testAllPayloads;
window.processLogin = processLogin;
window.containsSQLInjection = containsSQLInjection;
window.mockDatabase = mockDatabase;